# Copyright 2022 Cisco Systems, Inc. and its affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

service: hackday-scrum-retro
frameworkVersion: "3"

plugins:
  - serverless-s3-sync
  - serverless-domain-manager
  - serverless-plugin-common-excludes

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: eu-west-2
  apiGateway:
    binaryMediaTypes: ['*/*']
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - !GetAtt DynamoDbRoomsTable.Arn
            - !Join ["/", [!GetAtt DynamoDbRoomsTable.Arn, "index", "*"]]
            - !GetAtt DynamoDbColumnsTable.Arn
            - !Join ["/", [!GetAtt DynamoDbColumnsTable.Arn, "index", "*"]]
            - !GetAtt DynamoDbPostsTable.Arn
            - !Join ["/", [!GetAtt DynamoDbPostsTable.Arn, "index", "*"]]
            - !GetAtt DynamoDbParticipantsTable.Arn
            - !Join ["/", [!GetAtt DynamoDbParticipantsTable.Arn, "index", "*"]]
        - Effect: Allow
          Action:
            - s3:Get*
            - s3:List*
          Resource:
            - !Join ["", ["arn:aws:s3:::", { Ref: "ClientAssetsBucket" }, "/*"]]
  logs:
    websocket: false
  environment:
    DYNAMODB_TB_ROOMS: ${self:custom.dynamoDb.roomsTable.name}
    DYNAMODB_TB_ROOMS_IDX_PERSISTENT_ID: ${self:custom.dynamoDb.roomsTable.persistentIdIndex}
    DYNAMODB_TB_ROOMS_IDX_CONNECTION_ID: ${self:custom.dynamoDb.roomsTable.connectionIdIndex}
    DYNAMODB_TB_COLUMNS: ${self:custom.dynamoDb.columnsTable.name}
    DYNAMODB_TB_COLUMNS_IDX_ROOM_NAME: ${self:custom.dynamoDb.columnsTable.roomNameIndex}
    DYNAMODB_TB_POSTS: ${self:custom.dynamoDb.postsTable.name}
    DYNAMODB_TB_POSTS_IDX_COLUMN_ID: ${self:custom.dynamoDb.postsTable.columnIdIndex}
    DYNAMODB_TB_POSTS_IDX_ROOM_NAME: ${self:custom.dynamoDb.postsTable.roomNameIndex}
    DYNAMODB_TB_PARTICIPANTS: ${self:custom.dynamoDb.participantsTable.name}
    DYNAMODB_TB_PARTICIPANTS_IDX_ROOM_NAME: ${self:custom.dynamoDb.participantsTable.roomNameIndex}
    DYNAMODB_PARTICIPANTS_CONNECTION_ID_INDEX: ${self:custom.dynamoDb.participantsTable.connectionIdIndex}

custom:
  secrets: ${file(.settings/secrets.json)}
  dynamoDb:
    roomsTable:
      name: ${self:service}-${self:provider.stage}-tb_rooms
      persistentIdIndex: ${self:custom.dynamoDb.roomsTable.name}-idx_persistent_id
      connectionIdIndex: ${self:custom.dynamoDb.roomsTable.name}-idx_connection_id
    columnsTable:
      name: ${self:service}-${self:provider.stage}-tb_columns-v2
      roomNameIndex: ${self:custom.dynamoDb.columnsTable.name}-idx_room_name
    postsTable:
      name: ${self:service}-${self:provider.stage}-tb_posts-v2
      columnIdIndex: ${self:custom.dynamoDb.postsTable.name}-idx_column_id
      roomNameIndex: ${self:custom.dynamoDb.postsTable.name}-idx_room_name
    participantsTable:
      name: ${self:service}-${self:provider.stage}-tb_participants
      roomNameIndex: ${self:custom.dynamoDb.participantsTable.name}-idx_room_name
      connectionIdIndex: ${self:custom.dynamoDb.participantsTable.name}-idx_connection_id
  buckets:
    ASSETS_BUCKET_NAME: ${self:service}-${self:provider.stage}-assets
  s3Sync:
    - bucketName: ${self:custom.buckets.ASSETS_BUCKET_NAME}
      localDir: .nuxt/dist/client
  customDomain:
    domainName: ${self:custom.secrets.domainName.${self:provider.stage}}
    basePath: ""
    endpointType: regional
    certificateName: "scrumretro.lol"
    stage: ${self:provider.stage}
    createRoute53Record: true

package:
  excludeDevDependencies: true
  include:
    - dist/handler.js
    - .nuxt/**
  exclude:
    - .git/**
    - .settings/**
    - node_modules/@types/**

functions:
  onmessage:
    handler: ./dist/handler.websocketMessageHandler
    events:
      - websocket:
          route: $default
  disconnect:
    handler: ./dist/handler.websocketDisconnectedHandler
    events:
      - websocket:
          route: $disconnect

  nuxt:
    handler: ./dist/handler.nuxtHandler
    environment:
      LAMBDA_ENV: ${self:provider.stage}
    events:
      - http: ANY /
      - http: ANY /{proxy+}

resources:
  Resources:
    ClientAssetsRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - apigateway.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: "scrumretro-${self:provider.stage}-assets"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:Get*
                    - s3:List*
                  Resource:
                    - !Join ["", ["arn:aws:s3:::", { Ref: "ClientAssetsBucket" }, "/*"]]
    ClientAssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.ASSETS_BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - HEAD
                - PUT
                - POST
                - DELETE
              MaxAge: 3000
              ExposedHeaders:
                - x-amz-server-side-encryption
                - x-amz-request-id
                - x-amz-id-2
    UnderscoreNuxtResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        ParentId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - "RootResourceId"
        PathPart: _nuxt
    ClientAssetsProxyResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        ParentId:
          Ref: UnderscoreNuxtResource
        PathPart: "{proxy+}"
    s3ProxyGetMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        HttpMethod: GET
        ApiKeyRequired: false
        AuthorizationType: NONE
        ResourceId:
          Ref: ClientAssetsProxyResource
        Integration:
          Type: AWS
          IntegrationHttpMethod: GET
          Credentials: !GetAtt ["ClientAssetsRole", "Arn"]
          Uri: arn:aws:apigateway:${self:provider.region}:s3:path/${self:custom.buckets.ASSETS_BUCKET_NAME}/{proxy}
          RequestParameters:
            integration.request.header.Content-Type: method.request.header.Content-Type
            integration.request.header.x-amz-acl: "'authenticated-read'"
            integration.request.header.Expect: "'100-continue'"
            integration.request.path.proxy: method.request.path.proxy
          PassthroughBehavior: WHEN_NO_MATCH
          IntegrationResponses:
            - StatusCode: 200
              ResponseParameters:
                method.response.header.Timestamp: integration.response.header.Date
                method.response.header.Content-Type: integration.response.header.Content-Type
                method.response.header.Content-Disposition: integration.response.header.Content-Disposition
            - StatusCode: 400
              SelectionPattern: "400"
              ResponseParameters:
                method.response.header.Content-Type: integration.response.header.Content-Type
                method.response.header.Content-Disposition: integration.response.header.Content-Disposition
            - StatusCode: 404
              SelectionPattern: "404"
              ResponseParameters:
                method.response.header.Content-Type: integration.response.header.Content-Type
                method.response.header.Content-Disposition: integration.response.header.Content-Disposition
            - StatusCode: 500
              SelectionPattern: '5\d{2}'
              ResponseParameters:
                method.response.header.Content-Type: integration.response.header.Content-Type
                method.response.header.Content-Disposition: integration.response.header.Content-Disposition
        MethodResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Timestamp: integration.response.header.Date
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Content-Disposition
          - StatusCode: 400
            ResponseParameters:
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Content-Disposition
          - StatusCode: 404
            ResponseParameters:
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Content-Disposition
          - StatusCode: 500
            ResponseParameters:
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Content-Disposition: integration.response.header.Content-Disposition
        RequestParameters:
          method.request.header.Timestamp: false
          method.request.header.Content-Disposition: false
          method.request.header.Content-Type: false
          method.request.header.x-amz-acl: false
          method.request.path.proxy: false
    ApiGatewayDeploymentFinal:
      Type: AWS::ApiGateway::Deployment
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        StageName: ${self:provider.stage}
      DependsOn:
        - ApiGatewayMethodAny
        - ApiGatewayMethodProxyVarAny
        - s3ProxyGetMethod
    DynamoDbRoomsTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Delete
      Properties:
        TableName: ${self:custom.dynamoDb.roomsTable.name}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: room_name
            AttributeType: S
          - AttributeName: persistent_id
            AttributeType: S
          - AttributeName: connection_id
            AttributeType: S
        KeySchema:
          - AttributeName: room_name
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.dynamoDb.roomsTable.persistentIdIndex}
            Projection: { ProjectionType: ALL }
            KeySchema:
              - AttributeName: persistent_id
                KeyType: HASH
          - IndexName: ${self:custom.dynamoDb.roomsTable.connectionIdIndex}
            Projection: { ProjectionType: ALL }
            KeySchema:
              - AttributeName: connection_id
                KeyType: HASH
    DynamoDbColumnsTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Delete
      Properties:
        TableName: ${self:custom.dynamoDb.columnsTable.name}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: room_name
            AttributeType: S
          - AttributeName: column_id
            AttributeType: S
        KeySchema:
          - AttributeName: column_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.dynamoDb.columnsTable.roomNameIndex}
            Projection: { ProjectionType: ALL }
            KeySchema:
              - AttributeName: room_name
                KeyType: HASH
    DynamoDbPostsTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Delete
      Properties:
        TableName: ${self:custom.dynamoDb.postsTable.name}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: post_id
            AttributeType: S
          - AttributeName: column_id
            AttributeType: S
          - AttributeName: room_name
            AttributeType: S
        KeySchema:
          - AttributeName: post_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.dynamoDb.postsTable.columnIdIndex}
            Projection: { ProjectionType: ALL }
            KeySchema:
              - AttributeName: column_id
                KeyType: HASH
          - IndexName: ${self:custom.dynamoDb.postsTable.roomNameIndex}
            Projection: { ProjectionType: ALL }
            KeySchema:
              - AttributeName: room_name
                KeyType: HASH
    DynamoDbParticipantsTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Delete
      Properties:
        TableName: ${self:custom.dynamoDb.participantsTable.name}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: persistent_id
            AttributeType: S
          - AttributeName: room_name
            AttributeType: S
          - AttributeName: connection_id
            AttributeType: S
        KeySchema:
          - AttributeName: persistent_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.dynamoDb.participantsTable.roomNameIndex}
            Projection: { ProjectionType: ALL }
            KeySchema:
              - AttributeName: room_name
                KeyType: HASH
          - IndexName: ${self:custom.dynamoDb.participantsTable.connectionIdIndex}
            Projection: { ProjectionType: ALL }
            KeySchema:
              - AttributeName: connection_id
                KeyType: HASH
