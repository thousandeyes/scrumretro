service: hackday-scrum-retro
frameworkVersion: "2"

plugins:
  - serverless-s3-sync
  - serverless-domain-manager
  - serverless-apigw-binary
  - serverless-plugin-common-excludes

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: eu-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - !GetAtt DynamoDbRoomsTable.Arn
        - !Join ["/", [!GetAtt DynamoDbRoomsTable.Arn, "index", "*"]]
        - !GetAtt DynamoDbColumnsTable.Arn
        - !Join ["/", [!GetAtt DynamoDbColumnsTable.Arn, "index", "*"]]
        - !GetAtt DynamoDbPostsTable.Arn
        - !Join ["/", [!GetAtt DynamoDbPostsTable.Arn, "index", "*"]]
        - !GetAtt DynamoDbParticipantsTable.Arn
        - !Join ["/", [!GetAtt DynamoDbParticipantsTable.Arn, "index", "*"]]
  logs:
    websocket: false
  environment:
    DYNAMODB_TB_ROOMS: ${self:custom.dynamoDb.roomsTable.name}
    DYNAMODB_TB_ROOMS_IDX_PERSISTENT_ID: ${self:custom.dynamoDb.roomsTable.persistentIdIndex}
    DYNAMODB_TB_ROOMS_IDX_CONNECTION_ID: ${self:custom.dynamoDb.roomsTable.connectionIdIndex}
    DYNAMODB_TB_COLUMNS: ${self:custom.dynamoDb.columnsTable.name}
    DYNAMODB_TB_COLUMNS_IDX_ROOM_NAME: ${self:custom.dynamoDb.columnsTable.roomNameIndex}
    DYNAMODB_TB_POSTS: ${self:custom.dynamoDb.postsTable.name}
    DYNAMODB_TB_POSTS_IDX_COLUMN_ID: ${self:custom.dynamoDb.postsTable.columnIdIndex}
    DYNAMODB_TB_POSTS_IDX_ROOM_NAME: ${self:custom.dynamoDb.postsTable.roomNameIndex}
    DYNAMODB_TB_PARTICIPANTS: ${self:custom.dynamoDb.participantsTable.name}
    DYNAMODB_TB_PARTICIPANTS_IDX_ROOM_NAME: ${self:custom.dynamoDb.participantsTable.roomNameIndex}

custom:
  secrets: ${file(.settings/secrets.json)}
  dynamoDb:
    roomsTable:
      name: ${self:service}-${self:provider.stage}-tb_rooms
      persistentIdIndex: ${self:custom.dynamoDb.roomsTable.name}-idx_persistent_id
      connectionIdIndex: ${self:custom.dynamoDb.roomsTable.name}-idx_connection_id
    columnsTable:
      name: ${self:service}-${self:provider.stage}-tb_columns-v2
      roomNameIndex: ${self:custom.dynamoDb.columnsTable.name}-idx_room_name
    postsTable:
      name: ${self:service}-${self:provider.stage}-tb_posts-v2
      columnIdIndex: ${self:custom.dynamoDb.postsTable.name}-idx_column_id
      roomNameIndex: ${self:custom.dynamoDb.postsTable.name}-idx_room_name
    participantsTable:
      name: ${self:service}-${self:provider.stage}-tb_participants
      roomNameIndex: ${self:custom.dynamoDb.participantsTable.name}-idx_room_name
      connectionIdIndex: ${self:custom.dynamoDb.participantsTable.name}-idx_connection_id
  buckets:
    ASSETS_BUCKET_NAME: ${self:service}-${self:provider.stage}-assets
  s3Sync:
    - bucketName: ${self:custom.buckets.ASSETS_BUCKET_NAME}
      localDir: .nuxt/dist/client
  customDomain:
    domainName: ${self:custom.secrets.domainName.${self:provider.stage}}
    basePath: ""
    endpointType: regional
    certificateName: "scrumretro.lol"
    stage: ${self:provider.stage}
    createRoute53Record: true
  apigwBinary:
    types:
      - "*/*"

package:
  excludeDevDependencies: true
  include:
    - dist/handler.js
    - .nuxt/**
  exclude:
    - .git/**
    - .settings/**
    - node_modules/@types/**

functions:
  onmessage:
    handler: ./dist/handler.websocketMessageHandler
    events:
      - websocket:
          route: $default
  disconnect:
    handler: ./dist/handler.websocketDisconnectedHandler
  #   environment:
  #     DYNAMODB_VOTES_TABLE: ${self:custom.dynamoDbVotesTable}
  #     DYNAMODB_ROOMS_TABLE: ${self:custom.dynamoDbRoomsTable}
  #     DYNAMODB_ROOM_PLAYERS_TABLE: ${self:custom.dynamoDbRoomPlayersTable}
  #     DYNAMODB_ROOMS_CONNECTION_ID_INDEX: ${self:custom.dynamoDbRoomsTableConnectionIdIndex}
  #     DYNAMODB_ROOM_PLAYERS_CONNECTION_ID_INDEX: ${self:custom.dynamoDbRoomPlayersTableConnectionIdIndex}
    events:
      - websocket:
        route: $disconnect

  nuxt:
    handler: ./dist/handler.nuxtHandler
    environment:
      LAMBDA_ENV: ${self:provider.stage}
    events:
      - http: ANY /
      - http: ANY /{proxy+}
      - http:
          path: /_nuxt/{proxy+}
          method: ANY
          integration: http-proxy
          request:
            uri: https://${self:custom.buckets.ASSETS_BUCKET_NAME}.s3.${self:provider.region}.amazonaws.com/{proxy}
            parameters:
              paths:
                proxy: true

resources:
  Resources:
    ClientAssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.ASSETS_BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - HEAD
                - PUT
                - POST
                - DELETE
              MaxAge: 3000
              ExposedHeaders:
                - x-amz-server-side-encryption
                - x-amz-request-id
                - x-amz-id-2
    ClientAssetsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: ClientAssetsBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            [
              {
                Action: ["s3:GetObject"],
                Effect: "Allow",
                Resource:
                  {
                    Fn::Join:
                      [
                        "",
                        ["arn:aws:s3:::", { Ref: "ClientAssetsBucket" }, "/*"],
                      ],
                  },
                Principal: "*",
              },
            ]
    DynamoDbRoomsTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Delete
      Properties:
        TableName: ${self:custom.dynamoDb.roomsTable.name}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: room_name
            AttributeType: S
          - AttributeName: persistent_id
            AttributeType: S
          - AttributeName: connection_id
            AttributeType: S
        KeySchema:
          - AttributeName: room_name
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.dynamoDb.roomsTable.persistentIdIndex}
            Projection: { ProjectionType: ALL }
            KeySchema:
              - AttributeName: persistent_id
                KeyType: HASH
          - IndexName: ${self:custom.dynamoDb.roomsTable.connectionIdIndex}
            Projection: { ProjectionType: ALL }
            KeySchema:
              - AttributeName: connection_id
                KeyType: HASH
    DynamoDbColumnsTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Delete
      Properties:
        TableName: ${self:custom.dynamoDb.columnsTable.name}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: room_name
            AttributeType: S
          - AttributeName: column_id
            AttributeType: S
        KeySchema:
          - AttributeName: column_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.dynamoDb.columnsTable.roomNameIndex}
            Projection: { ProjectionType: ALL }
            KeySchema:
              - AttributeName: room_name
                KeyType: HASH
    DynamoDbPostsTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Delete
      Properties:
        TableName: ${self:custom.dynamoDb.postsTable.name}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: post_id
            AttributeType: S
          - AttributeName: column_id
            AttributeType: S
          - AttributeName: room_name
            AttributeType: S
        KeySchema:
          - AttributeName: post_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.dynamoDb.postsTable.columnIdIndex}
            Projection: { ProjectionType: ALL }
            KeySchema:
              - AttributeName: column_id
                KeyType: HASH
          - IndexName: ${self:custom.dynamoDb.postsTable.roomNameIndex}
            Projection: { ProjectionType: ALL }
            KeySchema:
              - AttributeName: room_name
                KeyType: HASH
    DynamoDbParticipantsTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Delete
      Properties:
        TableName: ${self:custom.dynamoDb.participantsTable.name}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: persistent_id
            AttributeType: S
          - AttributeName: room_name
            AttributeType: S
          - AttributeName: connection_id
            AttributeType: S
        KeySchema:
          - AttributeName: persistent_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.dynamoDb.participantsTable.roomNameIndex}
            Projection: { ProjectionType: ALL }
            KeySchema:
              - AttributeName: room_name
                KeyType: HASH
          - IndexName: ${self:custom.dynamoDb.participantsTable.connectionIdIndex}
            Projection: { ProjectionType: ALL }
            KeySchema:
              - AttributeName: connection_id
                KeyType: HASH
